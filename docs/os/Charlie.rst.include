3. Changing directories (cd)
==========================================

To navigate to a different directory, you can use the ``cd`` command followed by the path to the desired directory. For example, to move to a directory named "my_folder," you can do as explained below:

Type the following and press enter:
   .. code-block:: 

      cd MyFolder





.. tab:: {{ win_powershell }} 

   
   .. termynal:: termynal:chdirps
        :terminal: Powershell

        -   value: cd MyFolder
            type: input
            prompt: 'PS C:\User\youruser>'
        -   prompt: 'PS C:\User\youruser\Myfolder>'  

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-chdirps')">↺</button>

.. tab:: {{ win_batch }}

   
   .. termynal:: termynal:chdircmd
        :terminal: Command prompt

        -   value: cd MyFolder
            type: input
            prompt: 'C:\User\youruser>'
        -   prompt: 'C:\User\youruser\MyFolder>'

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-chdircmd')">↺</button>

.. tab:: {{ mac_bash }}

   
   .. termynal:: termynal:chdirmac
        :terminal: bash

        -   value: cd MyFolder # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@mac~%'
        -   prompt: username@mac MyFolder~%

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-chdirmac')">↺</button>
   .. $ pwd  # On Unix-based systems (Linux or macOS)

.. tab:: {{ linux_bash }}


   .. termynal:: termynal:chdirlinux
        :terminal: bash

        -   value: cd MyFolder # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@linux~$'
        -   prompt: 'username@linux MyFolder~$'

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-chdirlinux')">↺</button>



To navigate one step backwards, you can use the ``cd ..`` command:

.. code:: termynal 

   $ cd .. 

**exercise:** try to navigate to a directory, and then leaving it using ``cd ..``


4. How can i make using the terminal easier? 
==================================================

There are a few different tips/tricks to make using the terminal a lot smoother:

* Recycling old inputs with arrow-keys
   * If you have already input a command and need to use it again, pressing the upwards arrow key will go through your old inputs
   * This is especially useful for correcting typos in wrong input

* Using tab key to autocomplete input
   * The tab key is the one with two sideways arrows (usually placed above caps lock)
   * This is very efficient in combination with the ``cd`` command 
   * For example one can navigate to the folder "MyFolderForCourse01006" by simply typing ``cd My``, and then pressing tab followed by enter
   * This also works for importing packages 

* Pasting code into the terminal
   * The terminal is just like any other document, in the sense that you can copy and paste anything
   * **Warning: In the terminal, pasting is done by simply rightclicking or pressing with two fingers on the mousepad , not by using ``ctrl + v``**


9. Which packages do i have? 
==================================================

To see which packages you currently have, you can type ``pip3 list`` in the terminal.
After a couple of seconds, your terminal will list every package that you have downloaded

.. tab:: {{ win_powershell }} 

   
   .. termynal:: termynal:pip3list
        :terminal: Powershell

        -   value: pip3 list
            type: input
            prompt: 'PS C:\User\youruser>'
        -   "numpy     3.0.2"
        -   "sympy     2.0.4"

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3list')">↺</button>

.. tab:: {{ win_batch }}

   
   .. termynal:: termynal:pip3listcmd
        :terminal: Command prompt

        -   value: pip3 list
            type: input
            prompt: 'C:\User\youruser>'
        -   "numpy   3.0.2"
        -   "sympy   2.0.4"

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3listcmd')">↺</button>

.. tab:: {{ mac_bash }}

   
   .. termynal:: termynal:pip3listmac
        :terminal: bash

        -   value: pip3 list # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@mac~%'
        -   "numpy   3.0.2"
        -   "sympy   2.0.4"

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3listmac')">↺</button>
   .. $ pwd  # On Unix-based systems (Linux or macOS)

.. tab:: {{ linux_bash }}


   .. termynal:: termynal:pip3listlinux
        :terminal: bash

        -   value: pip3 list # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@linux~$'
        -   "numpy   3.0.2"
        -   "sympy   2.0.4"


   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3listlinux')">↺</button>





10. How can i install and uninstall packages? 
==================================================

To uninstall a package you can type ``pip3 install package name ``

For example, in order to install the sympy package, you could write the following:

.. code-block:: python

   pip3 install sympy 

It is also possible to do the same thing in order to uninstall a package 

.. code-block:: python

   pip3 uninstall sympy

A clever trick to use, is to install multiple packages in the same command. This makes it so that both packages will be installed, in versions that are compatible with one another.
For example, you can download sympy and numpy in one go, to make sure that their versions will be able to work together 

.. code-block:: python

   pip3 install sympy numpy 

.. tab:: {{ win_powershell }} 

   
   .. termynal:: termynal:pip3install
        :terminal: Powershell

        -   value: pip3 install numpy
            type: input
            prompt: 'PS C:\User\youruser>'
        -   "Collecting numpy"
        -   "Obtaining dependency information for numpy from https://files......."

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3install')">↺</button>

.. tab:: {{ win_batch }}

   
   .. termynal:: termynal:pip3installcmd
        :terminal: Command prompt

        -   value: pip3 install numpy
            type: input
            prompt: 'C:\User\youruser>'
        -   "Collecting numpy"
        -   "Obtaining dependency information for numpy from https://files......."

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3installcmd')">↺</button>

.. tab:: {{ mac_bash }}

   
   .. termynal:: termynal:pip3installmac
        :terminal: bash

        -   value: pip3 install numpy # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@mac~%'
        -   "Collecting numpy"
        -   "Obtaining dependency information for numpy from https://files......."

   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3installmac')">↺</button>
   .. $ pwd  # On Unix-based systems (Linux or macOS)


.. tab:: {{ linux_bash }}


   .. termynal:: termynal:pip3installlinux
        :terminal: bash

        -   value: pip3 list # On Unix-based systems (Linux or macOS)
            type: input
            prompt: 'username@linux~$'
        -   "Collecting numpy"
        -   "Obtaining dependency information for numpy from https://files......."


   .. raw:: html

      <button type="button"
        class="btn btn-primary"
        onclick="new Termynal('#termynal-pip3installlinux')">↺</button>
